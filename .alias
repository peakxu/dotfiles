#!/bin/bash

# Git shortcuts
alias git_cleanup="git branch --merged master | egrep -iv '(master|production|staging)' | xargs -n 1 git branch -d"
alias git_cleanup_remote="git branch -r --merged master | egrep -iv '(master|production|staging)' | sed 's/origin\///g' | xargs -n 1 git push --delete origin"

# Bundler shortcuts
alias be='bundle exec'
alias bivb='bundle install --path vendor/support'

# Working with data pipeline
alias dp='datapipeline'
alias dpi='datapipeline --id'
alias dpli='datapipeline --list-runs --id'
alias dplm='datapipeline --list-pipelines | grep peakxu'

# Data pipeline tasks
alias dpd='be rake definition'
alias dps='be rake deploy'
alias dpp='FOG_CREDENTIAL=swipely be rake env=production deploy[now]'

function jenkins-build {
  gitbranch=$(git symbolic-ref --short HEAD)
  if [[ $? -eq 0 ]] ; then
    gitrepo=$(basename `git rev-parse --show-toplevel`)
    if [[ $? -eq 0 ]] ; then
        job_prefixes=( app gem )
        for job_prefix in "${job_prefixes[@]}"
        do
            curl -X POST https://github:kwajfh347f@jenkins.swipely.com/job/$job_prefix.$gitrepo/buildWithParameters?BRANCH=$gitbranch > /dev/null 2>&1 || true
        done
    fi
  fi
}

function jenkins-show {
  gitrepo=$(basename `git rev-parse --show-toplevel`)
  if [[ $? -eq 0 ]] ; then
      job_prefixes=( app gem )
      for job_prefix in "${job_prefixes[@]}"
      do
        job_url="https://github:kwajfh347f@jenkins.swipely.com/job/$job_prefix.$gitrepo"
        curl -s --head $job_url | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null
        if [[ $? -eq 0 ]] ; then
          open $job_url
        fi
      done
  fi
}

function show-pr {
    export GIT_WORKING_HEAD=`git rev-parse HEAD`
    curl https://api.github.com/repos/dotswipely/weekly_digest_email_pipeline/pulls?access_token=$(< ~/.github_access_token) 2> /dev/null | jq '[.[] | {url: .html_url, sha: .head.sha}]' | sed s/": "/" => "/ | ruby -e "pulls = eval(STDIN.read); pulls.each { |p| puts p['url'] if p['sha'] == ENV['GIT_WORKING_HEAD'] }" | xargs open
}

function fetch-latest-pipeline-logs {
    if [ $# -ne 1 ]; then
        echo "Error, fetch-logs must specify pipeline"
        return 1
    fi
    local pipeline=$1
    if [ $# -ne 3 ]; then
        echo "No environment + owner specified, defaulting to staging + $USER"
        local env='staging'
        local owner="$USER"
    else
        local env=$2
        local owner=$3
    fi
    local s3_logs_path="s3://datapipeline-logs/$env/$owner/$pipeline/"
    local latest_s3_logs="$(s3cmd ls $s3_logs_path | grep DIR | tail -n 1 | tr -s ' ' | cut -d ' ' -f3)"
    latest_s3_logs=${latest_s3_logs%/}
    local local_logs_path="$HOME/s3/datapipeline-logs/$env/$owner/$pipeline"
    pushd $local_logs_path
    s3cmd get -r --skip-existing "$latest_s3_logs"
    popd
}
